name: Claude PR Auto Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  auto-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Automatic PR Review
        uses: anthropics/claude-code-action@v1-dev
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Please conduct a comprehensive code review for this PR. Follow these steps:

            1. **Pre-analysis**
               - Use `gh pr diff ${{ github.event.pull_request.number }}` to examine PR changes
               - Use `gh pr view ${{ github.event.pull_request.number }}` to get PR information
               - Analyze changed files in detail using `Glob` and `Read` tools

            2. **Comprehensive Review Execution**
               Use the Task tool to invoke the code-reviewer agent with the following detailed request:
               ```
               Please conduct an extremely detailed and comprehensive code review of the following PR changes:
               
               **Review Target**
               - REPO: ${{ github.repository }}
               - PR NUMBER: ${{ github.event.pull_request.number }}
               
               **Mandatory Check Items**
               - Security vulnerabilities (input validation, authentication/authorization, SQL injection, etc.)
               - Performance issues (algorithm efficiency, memory usage, DB query optimization)
               - Code quality (readability, maintainability, duplication, complexity)
               - Error handling (anyhow usage, Result types, error propagation)
               - Rust-specific issues (ownership, lifetimes, type safety, idioms)
               - Architecture (design patterns, dependencies, separation of concerns)
               - Testing (coverage, test patterns, edge cases)
               - Documentation (comments, API docs, README updates)
               
               **Output Requirements**
               - Report ALL issues found (including minor ones)
               - Include specific fix suggestions for each issue
               - Categorize by severity (Critical/High/Medium/Low)
               - Specify file names and line numbers
               ```

            3. **GitHub Results Posting**
               Post review results in the following format:
               - Use `gh pr comment:*` for overall review summary
               - Use `mcp__github_inline_comment__create_inline_comment` for inline comments on specific issues
               
            **Important Notes**
               - Avoid duplicate posts if already reviewed
               - Skip posting if no changes or only trivial changes
               - Ensure all findings are reported without omission

          claude_args: |
            --allowedTools "Task,mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Read,Glob,Grep"